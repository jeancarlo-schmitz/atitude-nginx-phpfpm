#!/bin/bash
set -euo pipefail

# Função auxiliar para imprimir seções destacadas
function section() {
  echo -e "\n🔹 \033[1;36m$1\033[0m"
}

section "🔻 Parando containers..."
docker-compose down || true

section "🧹 Limpando containers parados..."
docker container prune -f || true

section "🧹 Removendo imagem antiga do PHP..."
old_image_id=$(docker images | grep docker-ngix-phpfpm_php | awk '{print $3}' || true)
if [ -n "$old_image_id" ]; then
  docker image rm "$old_image_id" || true
else
  echo "ℹ️ Nenhuma imagem antiga encontrada."
fi

section "🔨 Rebuildando imagem PHP sem cache..."
docker-compose build --no-cache php

section "🚀 Subindo containers..."
docker-compose up -d

section "🧾 Verificando consistência do composer.json e composer.lock..."
# Valida o composer.json mas ignora warnings
if ! docker-compose run --rm php composer validate --no-check-all > composer_validate.log 2>&1; then
  echo "❌ composer.json contém erros fatais. Verifique o log abaixo:"
  cat composer_validate.log
  exit 1
else
  echo "✅ composer.json válido (warnings ignorados)."
fi

# Detecta se o composer.lock está desatualizado em relação ao composer.json
if docker-compose run --rm php composer install --dry-run 2>&1 | grep -q "lock file is not up to date"; then
  section "⚠️ composer.lock desatualizado — rodando composer update..."
  docker-compose run --rm php composer update --no-dev --optimize-autoloader
else
  section "🛠️ Rodando composer install..."
  docker-compose run --rm php composer install --no-dev --optimize-autoloader
fi

section "🧹 Otimizando autoload..."
docker-compose run --rm php composer dump-autoload --optimize

section "✅ Containers ativos:"
docker ps
